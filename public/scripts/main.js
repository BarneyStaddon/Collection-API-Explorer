 // tutorial8.js
        var data = [
          {id: 1, author: "Pete Hunt", text: "This is the first comment"},
          {id: 2, author: "Jordan Walker", text: "This is *another* comment"}
        ];
        
        // tutorial1.js
        //N.B These aren't actually DOM div elements but are React components - Pieces of data that react knows how to handle
        //returns a tree of React components
        //getInitialState() executes exactly once during the lifecycle of the component and sets up the initial state of the component.
        //componentDidMount is a method called automatically by React after a component is rendered for the first time
        
        var CommentBox = React.createClass({

            loadCommentsFromServer: function() {
                $.ajax({
                  url: this.props.url,
                  dataType: 'json',
                  cache: false,
                  success: function(data) {
                    this.setState({data: data});
                  }.bind(this),
                  error: function(xhr, status, err) {
                    console.error(this.props.url, status, err.toString());
                  }.bind(this)
                });
            },

            getInitialState: function() {
                return {data: []};
            },
            
            componentDidMount: function() {
                this.loadCommentsFromServer();
                setInterval(this.loadCommentsFromServer, this.props.pollInterval);
            },

            handleCommentSubmit: function(comment) {
                
                //N.B we pass this handler into the child commentForm component


                var comments = this.state.data;
                
                // Optimistically set an id on the new comment. It will be replaced by an
                // id generated by the server. In a production application you would likely
                // not use Date.now() for this and would have a more robust system in place.

                //so here we're adding the comment to the data in the state, before successfully writing to the json file 
                comment.id = Date.now();
                
                var newComments = comments.concat([comment]);
                this.setState({data: newComments});

                //N.B the bind passes the context of 'this' to be used in the function (callback in this case) 

                $.ajax({
                        url: this.props.url,
                        dataType: 'json',
                        type: 'POST',
                        data: comment,
                        success: function(data) {
                                this.setState({data: data});
                            }.bind(this),
                        error: function(xhr, status, err) {
                                this.setState({data: comments});
                                console.error(this.props.url, status, err.toString());
                            }.bind(this)
                });
            },

            render: function() {
              return (  
                <div className="commentBox">  
                    <h1>Comments</h1>
                    <CommentListing data={this.state.data} />
                    <CommentForm onCommentSubmit={this.handleCommentSubmit} />
                </div>
              );
            }
          });

        // tutorial2.js
        class CommentListing extends React.Component {

            render() {

                var commentNodes = this.props.data.map(function(comment) {
                  return (
                    <Comment author={comment.author} key={comment.id}>
                      {comment.text}
                    </Comment>
                  );
                });


                return (
                  <div className="commentList">
                    {commentNodes}
                  </div>
                );

            } 

        }

        /*

        var CommentList = React.createClass({
          render: function() {
            var commentNodes = this.props.data.map(function(comment) {
              return (
                <Comment author={comment.author} key={comment.id}>
                  {comment.text}
                </Comment>
              );
            });


            return (
              <div className="commentList">
                {commentNodes}
              </div>
            );
          }
        });

        */

        var CommentForm = React.createClass({

            getInitialState: function() {
                return {author: '', text: ''};
            },
            
            handleAuthorChange: function(e) {
                this.setState({author: e.target.value});
            },
            
            handleTextChange: function(e) {
                this.setState({text: e.target.value});
            },

            handleSubmit: function(e) {
                e.preventDefault();
                var author = this.state.author.trim();
                var text = this.state.text.trim();
                if (!text || !author) {
                  return;
                }
                
                this.props.onCommentSubmit({author: author, text: text});
                this.setState({author: '', text: ''});
            },

            render: function() {
                return (
                    <form className="commentForm" onSubmit={this.handleSubmit}>
                        <input type="text" placeholder="Your name" value={this.state.author} onChange={this.handleAuthorChange} />
                        <input type="text" placeholder="Say something..." value={this.state.text} onChange={this.handleTextChange} />
                        <input type="submit" value="Post" />
                    </form>
                );
            }
        });

        // tutorial4.js
        //we use the remarkable library here to convert raw markup into HTML
        var Comment = React.createClass({

            rawMarkup: function() {
                var md = new Remarkable();
                var rawMarkup = md.render(this.props.children.toString());
                return { __html: rawMarkup };
            },

            render: function() {
        
                return (
                    <div className="comment">
                        <h2 className="commentAuthor">
                        {this.props.author}
                        </h2>
                        <span dangerouslySetInnerHTML={this.rawMarkup()} />
                    </div>
            );
          }
        });
        
        //instantiates the root component, starts the framework, and injects the markup into a raw DOM element, provided as the second argument.
        ReactDOM.render(
            <CommentBox url="/api/comments" pollInterval={2000}/>,
            document.getElementById('content')
          );